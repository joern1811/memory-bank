name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run unit tests
      run: make test-unit

    - name: Generate test coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v2/heartbeat || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        ollama serve &
        sleep 10
        ollama pull nomic-embed-text

    - name: Wait for services
      run: |
        # Wait for ChromaDB
        timeout 60s bash -c 'until curl -f http://localhost:8000/api/v2/heartbeat; do sleep 2; done'
        
        # Wait for Ollama
        timeout 60s bash -c 'until curl -f http://localhost:11434/api/version; do sleep 2; done'

    - name: Install dependencies
      run: make deps

    - name: Build application
      run: make build

    - name: Run integration tests
      run: make test-integration
      env:
        MEMORY_BANK_OLLAMA_BASE_URL: http://localhost:11434
        MEMORY_BANK_CHROMADB_BASE_URL: http://localhost:8000

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install build dependencies
      run: |
        if [ "${{ matrix.goos }}" = "linux" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc-multilib gcc-aarch64-linux-gnu
        elif [ "${{ matrix.goos }}" = "windows" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64
        fi

    - name: Build binary
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="memory-bank-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          if [ "${{ matrix.goarch }}" = "amd64" ]; then
            export CC=x86_64-w64-mingw32-gcc
          else
            export CC=i686-w64-mingw32-gcc
          fi
        elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
          BINARY_NAME="memory-bank-${{ matrix.goos }}-${{ matrix.goarch }}"
          export CC=aarch64-linux-gnu-gcc
        else
          BINARY_NAME="memory-bank-${{ matrix.goos }}-${{ matrix.goarch }}"
        fi
        
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 \
        go build -ldflags="-w -s" -o $BINARY_NAME ./cmd/memory-bank

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: memory-bank-${{ matrix.goos }}-${{ matrix.goarch }}
        path: memory-bank-*
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: gosec.sarif
        
    - name: Generate gosec SARIF report
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: goreleaser/goreleaser-action@v4
      if: startsWith(github.ref, 'refs/tags/')
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        make build
        
        # Generate CLI documentation
        ./memory-bank --help > docs/cli-help.txt || true
        ./memory-bank config --help > docs/config-help.txt || true
        ./memory-bank migrate --help > docs/migrate-help.txt || true

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/ || true
        git diff --staged --quiet || git commit -m "📝 Update documentation [skip ci]"
        git push || true